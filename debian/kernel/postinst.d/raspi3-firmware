#!/bin/sh
# vim:ts=2:sw=2:et
# see also:
# https://kernel-handbook.alioth.debian.org/ch-update-hooks.html#s-kernel-hooks

set -e

check_dtb()
{
  dtb=$1
  if [ ! -e "$dtb" ]; then
    echo "raspi3-firmware: device tree file $dtb does not exist, cannot populate /boot/firmware"
    exit 0
  fi
}

# Play nice when run under debconf.
exec </dev/null >&2

eval set -- "$DEB_MAINT_PARAMS"

# Only run on configure and remove to avoid unnecessary work.
case "$1" in
  configure|remove)
    ;;
  *)
    exit 0
    ;;
esac

if ischroot ; then
  : chroot detected - skip mount point check
elif test -e /usr/bin/systemd-detect-virt && systemd-detect-virt -q ; then
  : virtualization detected - skip mount point check
elif ! mountpoint -q /boot/firmware; then
  echo "raspi3-firmware: missing /boot/firmware, did you forget to mount it?" >&2
  exit 1
fi

latest_kernel=$(ls -1 /boot/vmlinuz-* | grep -v '\.dpkg-bak$' | sort -V -r | head -1)
if [ -z "$latest_kernel" ]; then
  echo "raspi3-firmware: no kernel found in /boot/vmlinuz-*, cannot populate /boot/firmware"
  exit 0
fi

latest_initrd=$(ls -1 /boot/initrd.img-* | grep -v '\.dpkg-bak$' | sort -V -r | head -1)
if [ -z "$latest_initrd" ]; then
  echo "raspi3-firmware: no initrd found in /boot/initrd.img-*, cannot populate /boot/firmware"
  exit 0
fi

arch=$(dpkg --print-architecture)
if [ "arm64" = "$arch" ]; then
  dtb_path="/usr/lib/linux-image-${latest_kernel#/boot/vmlinuz-}/broadcom"
else
  # there is no vendor subdirectory for armhf
  dtb_path="/usr/lib/linux-image-${latest_kernel#/boot/vmlinuz-}"
fi

pi2b_dtb_soc=${dtb_path}/bcm2836-rpi-2-b.dtb
pi2b_dtb_family=bcm2709-rpi-2-b.dtb
pi3b_dtb_soc=${dtb_path}/bcm2837-rpi-3-b.dtb
pi3b_dtb_family=bcm2710-rpi-3-b.dtb

if [ "armhf" = "$arch" ]; then
  # the rpi-2-b only supports 32-bit
  check_dtb $pi2b_dtb_soc
fi
check_dtb $pi3b_dtb_soc

# start to modify only after all tests above were successful
cp "$latest_kernel" /boot/firmware/
cp "$latest_initrd" /boot/firmware/

# copy all possible dtbs - the firmware will automagically choose the right one
if [ "armhf" = "$arch" ]; then
  cp "$pi2b_dtb_soc" /boot/firmware/${pi2b_dtb_family}
fi
cp "$pi3b_dtb_soc" /boot/firmware/${pi3b_dtb_family}

latest_kernel_basename=$(basename "$latest_kernel")
latest_initrd_basename=$(basename "$latest_initrd")

if [ "arm64" = "$arch" ]; then
  cat >/boot/firmware/config.txt <<EOF
# Switch the CPU from ARMv7 into ARMv8 (aarch64) mode
arm_control=0x200

EOF
else
  # Truncate the file so that we can append in the next statement
  cat >/boot/firmware/config.txt <<EOF
EOF
fi

cat >>/boot/firmware/config.txt <<EOF
enable_uart=1

kernel=${latest_kernel_basename}
# For details on the initramfs directive, see
# https://www.raspberrypi.org/forums/viewtopic.php?f=63&t=10532
initramfs ${latest_initrd_basename}
EOF

serial="ttyAMA0,115200"
kernelmajor=$(echo "${latest_kernel_basename}" | sed 's,^vmlinuz-,,g' | cut -d. -f 1)
kernelminor=$(echo "${latest_kernel_basename}" | cut -d. -f 2)
if [ $kernelmajor -ge 4 ]; then
  if [ $kernelminor -ge 14 ]; then
    # Since Linux 4.14, /dev/ttyS1 is the UART on the pinheader.
    serial="ttyS1,115200"
  fi
fi

# Our cmdline.txt is the default (see http://elinux.org/RPi_cmdline.txt), but
# without parameters for drivers we do not have (e.g. dwc_otg.lpm_enable) or
# parameters we do not need (e.g. rootfstype=, as we are using an initrd).
cat >/boot/firmware/cmdline.txt <<EOF
console=tty0 console=${serial} root=/dev/mmcblk0p2 rw elevator=deadline fsck.repair=yes net.ifnames=0 cma=64M rootwait
EOF

cd /boot/firmware
for file in vmlinuz-* initrd.img-*; do
  if [ ! -e "/boot/$file" ]; then
    echo "raspi3-firmware: deleting obsolete /boot/firmware/$file (no longer in /boot)"
    # Keep going if cleanup of individual files fails. It is better for the end
    # user to have a working package upgrade and a slight waste of space than a
    # broken upgrade.
    rm -f "$file" || true
  fi
done
